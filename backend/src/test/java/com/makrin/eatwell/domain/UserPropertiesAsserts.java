package com.makrin.eatwell.domain;

import static com.makrin.eatwell.domain.AssertUtils.zonedDataTimeSameInstant;
import static org.assertj.core.api.Assertions.assertThat;

public class UserPropertiesAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUserPropertiesAllPropertiesEquals(UserProperties expected, UserProperties actual) {
        assertUserPropertiesAutoGeneratedPropertiesEquals(expected, actual);
        assertUserPropertiesAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUserPropertiesAllUpdatablePropertiesEquals(UserProperties expected, UserProperties actual) {
        assertUserPropertiesUpdatableFieldsEquals(expected, actual);
        assertUserPropertiesUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUserPropertiesAutoGeneratedPropertiesEquals(UserProperties expected, UserProperties actual) {
        assertThat(expected)
            .as("Verify UserProperties auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUserPropertiesUpdatableFieldsEquals(UserProperties expected, UserProperties actual) {
        assertThat(expected)
            .as("Verify UserProperties relevant properties")
            .satisfies(e -> assertThat(e.getName()).as("check name").isEqualTo(actual.getName()))
            .satisfies(e -> assertThat(e.getGender()).as("check gender").isEqualTo(actual.getGender()))
            .satisfies(e -> assertThat(e.getDate()).as("check date").isEqualTo(actual.getDate()))
            .satisfies(e -> assertThat(e.getCurrentWeight()).as("check currentWeight").isEqualTo(actual.getCurrentWeight()))
            .satisfies(e -> assertThat(e.getPreferredWeight()).as("check preferredWeight").isEqualTo(actual.getPreferredWeight()))
            .satisfies(e -> assertThat(e.getHeight()).as("check height").isEqualTo(actual.getHeight()))
            .satisfies(e -> assertThat(e.getLifestyle()).as("check lifestyle").isEqualTo(actual.getLifestyle()))
            .satisfies(e -> assertThat(e.getCaloriesNeeded()).as("check caloriesNeeded").isEqualTo(actual.getCaloriesNeeded()))
            .satisfies(e ->
                assertThat(e.getCreatedDate())
                    .as("check createdDate")
                    .usingComparator(zonedDataTimeSameInstant)
                    .isEqualTo(actual.getCreatedDate())
            )
            .satisfies(e ->
                assertThat(e.getLastModifiedDate())
                    .as("check lastModifiedDate")
                    .usingComparator(zonedDataTimeSameInstant)
                    .isEqualTo(actual.getLastModifiedDate())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUserPropertiesUpdatableRelationshipsEquals(UserProperties expected, UserProperties actual) {
        // empty method
    }
}
